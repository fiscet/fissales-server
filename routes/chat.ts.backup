import { Router } from 'express';
import { logger } from '../utils/logger.js';
import { getMastra } from '../ai/mastra.js';
import { RuntimeContext } from '@mastra/core/runtime-context';
import { getCompanyInfoCached, invalidateCompanyInfoCache } from '../utils/company-cache.js';
import { MastraContext } from '../types/index.js';
import { PromptLoader } from '../ai/utils/prompt-loader.js';

const router = Router();

// Main chat endpoint - AI agent conversations
router.post('/', async (req, res) => {
  try {
    const { message, sessionId, userId } = req.body;

    if (!message || typeof message !== 'string') {
      return res.status(400).json({
        error: 'Invalid Message',
        message: 'Message is required and must be a string',
        code: 'INVALID_MESSAGE',
        timestamp: new Date().toISOString()
      });
    }

    if (!sessionId) {
      return res.status(400).json({
        error: 'Session ID Required',
        message: 'Session ID is required',
        code: 'SESSION_ID_REQUIRED',
        timestamp: new Date().toISOString()
      });
    }

    logger.info('Chat request received', {
      sessionId,
      userId: userId || 'anonymous',
      messageLength: message.length,
      message: message
    });

    // Get Mastra instance and company data (with cache)
    const mastra = await getMastra();
    const companyInfo = await getCompanyInfoCached();

    // Create runtime context with company data and session info
    const runtimeContext = new RuntimeContext<MastraContext>();
    runtimeContext.set('sessionId', sessionId);
    runtimeContext.set('userId', userId || 'anonymous');
    runtimeContext.set('companyName', companyInfo?.name || '');
    runtimeContext.set('companyDescription', companyInfo?.description || '');

    // Add threadId and resourceId for memory tools
    runtimeContext.set('threadId', sessionId);
    runtimeContext.set('resourceId', userId || 'anonymous');

    // Use the main network with runtime context and memory
    const network = mastra.vnext_getNetwork('mainNetwork');

    if (!network) {
      logger.error('Network not found', { networkId: 'mainNetwork' });
      return res.status(500).json({
        error: 'Network Not Found',
        message: 'Main network is not available',
        code: 'NETWORK_NOT_FOUND',
        timestamp: new Date().toISOString()
      });
    }

    logger.info('Network found, generating response', {
      networkId: 'mainNetwork',
      networkName: network.name
    });

    const response = await network.generate(message, {
      runtimeContext,
    });

    logger.info('Network response generated', {
      sessionId,
      userId: userId || 'anonymous',
      responseLength: response?.result?.length || 0,
      responseType: typeof response,
      responseKeys: response ? Object.keys(response) : 'null',
      responseContent: response?.result ? String(response.result).substring(0, 200) + '...' : 'No result',
      task: response?.task,
      resourceType: response?.resourceType,
      resourceId: response?.resourceId
    });

    // Extract the structured data from workflow or network response
    let responseData = {
      response: 'Thank you for your interest!',
      recommendedProducts: [],
      reasoning: '',
      nextSteps: [],
      urgencyLevel: 'low'
    };

    if (isProductRequest) {
      // Handle workflow response
      if (response?.runResult) {
        responseData.response = response.runResult.salesResponse || responseData.response;
        responseData.recommendedProducts = response.runResult.recommendedProducts || [];
        responseData.reasoning = response.runResult.reasoning || '';
        responseData.nextSteps = response.runResult.nextSteps || [];
        responseData.urgencyLevel = response.runResult.urgencyLevel || 'low';
      }
    } else {
      // Handle network response
      if (response?.result) {
        try {
          // Parse the workflow result to extract all data
          const workflowResult = JSON.parse(response.result);

          if (workflowResult.runResult) {
            // Extract from runResult
            responseData.response = workflowResult.runResult.salesResponse || responseData.response;
            responseData.recommendedProducts = workflowResult.runResult.recommendedProducts || [];
            responseData.reasoning = workflowResult.runResult.reasoning || '';
            responseData.nextSteps = workflowResult.runResult.nextSteps || [];
            responseData.urgencyLevel = workflowResult.runResult.urgencyLevel || 'low';
          } else {
            // Extract directly from result
            responseData.response = workflowResult.salesResponse || responseData.response;
            responseData.recommendedProducts = workflowResult.recommendedProducts || [];
            responseData.reasoning = workflowResult.reasoning || '';
            responseData.nextSteps = workflowResult.nextSteps || [];
            responseData.urgencyLevel = workflowResult.urgencyLevel || 'low';
          }
        } catch (error) {
          // If parsing fails, use the raw result as response
          responseData.response = response.result;
        }
      }
    }

    return res.status(200).json({
      ...responseData,
      sessionId,
      userId: userId || null,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('Chat endpoint error:', error);
    return res.status(500).json({
      error: 'Chat Processing Failed',
      message: error instanceof Error ? error.message : 'Unknown error',
      code: 'CHAT_PROCESSING_ERROR',
      timestamp: new Date().toISOString()
    });
  }
});

// Cache clearing endpoint for development
router.post('/clear-cache', async (req, res) => {
  try {
    // Clear prompt cache
    PromptLoader.clearCache();

    // Clear company cache
    invalidateCompanyInfoCache();

    // Clear Mastra instance (will be recreated on next request)
    // Note: This requires restarting the server to fully clear

    logger.info('Caches cleared successfully');

    return res.status(200).json({
      message: 'Caches cleared successfully',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('Failed to clear caches:', error);
    return res.status(500).json({
      error: 'Failed to clear caches',
      message: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

export { router as chatRouter };
